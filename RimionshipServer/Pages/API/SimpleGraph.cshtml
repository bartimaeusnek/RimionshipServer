@page "{secret}"
@model RimionshipServer.Pages.Api.SimpleGraph

@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <!--<meta name="viewport" content="width=device-width, initial-scale=1.0" />-->
        <title>Graph @Model.GraphName</title>
    </head>
    <body>
    <div class="chart-container" style="position: relative; height:1080px; width:1920px">
        <canvas id="myChart"></canvas>
    </div>
    <script>
        window.setTimeout(() => window.location = window.location, 5000);
    </script>
@{
#if DEBUG
}
    <script type="text/javascript" src="~/lib/chart-js/dist/chart.js"></script>
    <script type="text/javascript" src="~/lib/chart-js-adapter-date/chartjs-adapter-date-fns.bundle.min.js"></script>
    @{
#else
}
    <script type="text/javascript" src="~/lib/chart-js/dist/chart.min.js"></script>
    <script type="text/javascript" src="~/lib/chart-js-adapter-date/chartjs-adapter-date-fns.bundle.min.js"></script>
@{
#endif
}
    <script type="text/javascript" defer="">
       
         const labels = JSON.parse('@Html.Raw(Json.Serialize(Model.Labels))');
         let datasets = JSON.parse('@Html.Raw(Json.Serialize(Model.Datasets))');

         const data = {
           labels: labels,
           datasets: datasets
         };
         const config = {
             type: 'line',
             data: data,
             options: {
                 animation: false,
                 elements: {
                     point: {
                         radius: 0
                     },
                     line: {
                         cubicInterpolationMode: 'monotone'
                     }
                 },
                 plugins: {
                     legend:{
                         position: 'right',
                         labels: {
                             font: {
                                 size: 24
                             }
                         }
                     }
                 },
                 scales: {
                     x: {
                         type: 'time',
                         alignToPixels: true,
                         ticks: {
                             includeBounds: true,
                             maxRotation: 0,
                             maxTicksLimit: 13,
                             color: '#9d9d9c',
                             callback: function(value, index, ticks) {
                                 const date = new Date(ticks[index].value);
                                 return new Intl.DateTimeFormat('de', { hour: '2-digit', minute: '2-digit' }).format(date);
                             }
                         }
                     },
                     y: {
                         color: '#9d9d9c',
                         alignToPixels: true
                     }
                 }
             }
         };
         const myChart = new Chart(document.getElementById('myChart'), config);
    </script>

    </body>
</html>