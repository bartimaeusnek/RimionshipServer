@page "{secret}"
@model RimionshipServer.Pages.Api.SimpleGraph

@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="preload" href="~/fonts/RimWordFont.ttf" as="font" crossorigin="anonymous">
    @{
    #if DEBUG
    }
    <link rel="stylesheet" href="/css/fonts.css">
    @{
    #else
    }
        <link rel="stylesheet" href="/css/fonts.min.css">
    @{
    #endif
    }
    <meta charset="utf-8"/>
    <title>Graph @Model.GraphName</title>
</head>
<body style="overflow: hidden">
    <label style="color: #cd0000; font-size: xx-large" class="rimfont">@Model.GraphHeading</label>
    <div class="chart-container" style="position: relative; height:@(Html.ViewData["height"] ?? 1080)px; width:@(Html.ViewData["width"] ?? 1920)px; margin-top: 40px;">
        <canvas id="myChart" style="height:@(Html.ViewData["height"] ?? 1080)px; width:@(Html.ViewData["width"] ?? 1920)px;"></canvas>
    </div>
    <script>
        window.setTimeout(() => window.location = window.location, 5000);
    </script>
@{
#if DEBUG
}
    <script type="text/javascript" src="~/lib/chart-js/dist/chart.js"></script>
    <script type="text/javascript" src="~/lib/chart-js-adapter-date/chartjs-adapter-date-fns.bundle.min.js"></script>
    @{
#else
}
    <script type="text/javascript" src="~/lib/chart-js/dist/chart.min.js"></script>
    <script type="text/javascript" src="~/lib/chart-js-adapter-date/chartjs-adapter-date-fns.bundle.min.js"></script>
@{
#endif
}
    <script type="text/javascript" defer="">
       
         const labels = JSON.parse('@Html.Raw(Json.Serialize(Model.Labels))');
         let datasets = JSON.parse('@Html.Raw(Json.Serialize(Model.Datasets))');

         const data = {
           labels: labels,
           datasets: datasets
         };
         const config = {
             type: 'line',
             data: data,
             options: {
                 animation: false,
                 elements: {
                     point: {
                         radius: 0
                     },
                     line: {
                         cubicInterpolationMode: 'monotone'
                     }
                 },
                 plugins: {
				     @{
						var embedded = Html.ViewData["embed"] is not null;
					    if (embedded)
                         {
                             @Html.Raw(@"legend:{
                                display: false
                             }
                            ")
                         }
                         else
                         {
                             @Html.Raw(@"
                             legend:
                             {
                                 position: 'right',
                                 labels:
                                 {
                                     font:
                                     {
                                         size: 24
                                     }
                                 }
                             }")
                         }
					 }
                 },
                 scales: {
                     x: {
                         type: 'time',
                         alignToPixels: true,
                         ticks: {
                             includeBounds: true,
                             maxRotation: 0,
                             maxTicksLimit: 13,
                             color: '#9d9d9c',
                             callback: function(value, index, ticks) {
                                 const date = new Date(ticks[index].value);
                                 return new Intl.DateTimeFormat('de', { hour: '2-digit', minute: '2-digit' }).format(date);
                             }
									  @if (!embedded)
									  {
										  @Html.Raw(@", font:
										  {
												size: 24
										  }")
									  }
                         }
                     },
                     y: {
                         color: '#9d9d9c',
                         alignToPixels: true
								@if (!embedded)
								{
								@Html.Raw(@", ticks: {
									font:
									 {
										  size: 24
									 }
								}")
								}
                     }
                 }
             }
         };
         const myChart = new Chart(document.getElementById('myChart'), config);
    </script>

    </body>
</html>